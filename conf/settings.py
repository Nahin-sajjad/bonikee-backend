"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import socket
import os
from datetime import timedelta
from pathlib import Path
from decouple import config


# import sys
# sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOGGING_DIR = os.path.join(BASE_DIR, "logs")  # Directory where log files will be stored

# Create the log directory if it doesn't exist
os.makedirs(LOGGING_DIR, exist_ok=True)

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", default=False, cast=bool)
# DEBUG=True
# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = config("ALLOWED_HOSTS").split(",")
ALLOWED_CIDR_NETS = list(config("ALLOWED_CIDR").split(","))

# Application definition

SHARED_APPS = (
    "django_tenants",
    "apps.clients",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "apps.users",
    "apps.accounts",
    "crispy_forms",
    "crispy_bootstrap5",
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_user_agents",
    "debug_toolbar",
    "drf_spectacular",
    "storages",
)

TENANT_APPS = (
    "apps.inventories",
    "apps.vendors",
    "apps.procurement",
    "apps.customers",
    "apps.sales",
    "apps.finance",
    "apps.hr",
    "apps.client_admin",
)

INSTALLED_APPS = list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "apps.share.request_middleware.RequestMiddleware",
    "apps.share.log_middleware.TenantLoggerMiddleware",
]


TENANT_MODEL = "clients.ClientModel"  # app.Model
TENANT_DOMAIN_MODEL = "clients.DomainModel"  # app.Model
DEFAULT_TENANT_DOMAIN = "localhost"
TENANT_SUBFOLDER_PREFIX = "clients"
ORIGINAL_BACKEND = "django.contrib.gis.db.backends.postgis"

SITE_ID = 1
AUTH_USER_MODEL = "users.User"
AUTH_GROUP_MODEL = "accounts.CustomGroup"

GDAL_LIBRARY_PATH = "/usr/lib/libgdal.so"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "apps.users.custom_authentication.CustomAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_ALLOW_ALL = False
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
#     "http://*.localhost:3000",
#     "http://bonikee.com",
#     "http://*.bonikee.com",
#     "http://dev.bonikee.com",
#     "http://app.dev.bonikee.com",
#     "http://*.dev.bonikee.com",
#     "http://*.app.dev.bonikee.com",
# ]

ROOT_URLCONF = "conf.urls"
# Add wildcard subdomains
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^http://\w+\.localhost:3000$",
#     r"^http://\w+\.bonikee.com$",
#     "http://dev.bonikee.com",
#     "http://app.dev.bonikee.com",
#     "http://*.dev.bonikee.com",
#     "http://*.app.dev.bonikee.com",
# ]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": config("DATABASES_NAME"),
        "USER": config("DATABASES_USER"),
        "PASSWORD": config("DATABASES_PASSWORD"),
        "HOST": config("DATABASES_HOST"),
        "PORT": config("DATABASE_PORT"),
    }
}

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Dhaka"

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

if DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

if config("SERVER_STAGE") != "LOCAL":
    DEFAULT_FILE_STORAGE = "conf.storage_backends.MediaStorage"
    STATICFILES_STORAGE = "conf.storage_backends.StaticStorage"

    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")

    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

    # Configure the media URL
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    # Configure the static URL
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# django-crispy-forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # new
CRISPY_TEMPLATE_PACK = "bootstrap5"  # new


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # custom
    "AUTH_COOKIE_ACCESS_TOKEN": "access_token",
    # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_REFRESH_TOKEN": "refresh_token",
    # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_DOMAIN": None,
    # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_SECURE": False,
    # Http only cookie flag.It's not fetch by javascript.
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    # Whether to set the flag restricting cookie leaks on cross-site requests.
    "AUTH_COOKIE_SAMESITE": "Lax",
    # This can be 'Lax', 'Strict', or None to disable the flag.
}
# SESSION_COOKIE_DOMAIN = '.localhost'
# CSRF_COOKIE_DOMAIN = '.localhost'

SPECTACULAR_SETTINGS = {
    "TITLE": "Glascutr SaaS Project",
    "DESCRIPTION": "Inspiring Business to Thrive",
    "VERSION": "1.0.0",
    # OTHER SETTINGS
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file_error": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOGGING_DIR, "error.log"),
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["file_error"],
        "level": "DEBUG",
    },
}

# django-debug-toolbar
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())

# for docker
# INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]

# for localhost
INTERNAL_IPS = "127.0.0.1"
